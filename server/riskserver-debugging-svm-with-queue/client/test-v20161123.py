import json
import time

import requests

imei = raw_input("Enter IMEI >>").strip()

base_path = '/home/sandeep/portal/chosen/'

# KARAN DATA
# original_imei = '865980023978965'

# train_files = ['20161005224236', '20161005224331', '20161005224842', '20161006003828', '20161006043929', '20161006044001', '20161006044807', '20161006044817', '20161006044845', '20161006044856', '20161006044924', '20161006044951', '20161006045022', '20161006045045', '20161006045056', '20161006045920', '20161006045946', '20161006050238', '20161006050303', '20161006050337', '20161006140030', '20161006195342', '20161006195354', '20161006195403', '20161006195418', '20161006200854', '20161006200902', '20161006201120', '20161006202832', '20161006202843', '20161006204405', '20161008062643', '20161008062732', '20161008062852', '20161009221807', '20161009221816', '20161009221824', '20161009221839', '20161009221848', '20161009221858', '20161009222129', '20161009222147', '20161009222206', '20161009222213', '20161009225810', '20161009225811', '20161009225817', '20161009225831', '20161011032324', '20161011032331', '20161011032344', '20161011032455', '20161011032539', '20161011033344', '20161011033351', '20161011033358', '20161011033419', '20161011033543', '20161011033609', '20161011033627', '20161011033727', '20161011033738', '20161011033812', '20161011033819', '20161011182519', '20161011182528', '20161011201221', '20161011203310', '20161011203321', '20161011203336', '20161011204136', '20161011204149', '20161011204200', '20161011204241', '20161011204317', '20161011205508', '20161011205516', '20161011210742', '20161011210825', '20161011211010', '20161011211647', '20161011211712', '20161011211751', '20161011211800', '20161011211808', '20161011213719', '20161011213805', '20161011213818', '20161011221025', '20161011221031', '20161011221037', '20161011221045', '20161011221048', '20161011221242', '20161011221257', '20161011221719', '20161011221727', '20161011222932', '20161011222942', '20161011225944', '20161012011115', '20161012011134', '20161012150305', '20161012152035', '20161012152144', '20161012152415', '20161012152558', '20161012153203', '20161012153207', '20161012153432', '20161012153440', '20161015160533', '20161016051617', '20161016051627', '20161016051639', '20161016051644', '20161016051703', '20161016153911', '20161016154045', '20161016154100', '20161016154115', '20161016154148', '20161016154152', '20161016154324', '20161016154409', '20161016154645', '20161016154848', '20161016155220', '20161016155227', '20161016155424', '20161016155556', '20161016155615', '20161016160107', '20161016160329', '20161016161017', '20161016161018', '20161016161054', '20161016161110', '20161018045142', '20161022214340', '20161026145721', '20161026145734', '20161026145742', '20161026145748', '20161026145802', '20161026145805', '20161026145909', '20161026145927', '20161026145937', '20161026150000', '20161026150020', '20161026150039', '20161026150129', '20161026150143', '20161026150205', '20161026150245', '20161031142258', '20161102163653', '20161102163707', '20161110044441', '20161110044452', '20161110044659', '20161110044756', '20161110213925', '20161110214849', '20161110220927', '20161110223243', '20161110223405', '20161110223434', '20161111052532', '20161111053045', '20161111223232', '20161111224950', '20161112002617', '20161112014213', '20161112030119', '20161112030120', '20161112030130', '20161112030728', '20161112030756', '20161112030806', '20161112030818', '20161112031128', '20161112031619', '20161112031737', '20161112032226', '20161112032241']

# test_files = ['20161006045022', '20161006045045', '20161006045056', '20161006045920', '20161006045946', '20161006050238', '20161006050303', '20161006050337', '20161006140030', '20161006195342', '20161006195354', '20161006195403', '20161006195418', '20161006200854', '20161006200902', '20161006201120', '20161006202832', '20161006202843', '20161006204405', '20161008062643', '20161008062732', '20161008062852', '20161009221807', '20161009221816', '20161009221824', '20161009221839', '20161009221848', '20161009221858', '20161009222129', '20161009222147', '20161009222206', '20161009222213', '20161009225810', '20161009225811', '20161009225817', '20161009225831', '20161011032324', '20161011032331', '20161011032344', '20161011032455', '20161011032539', '20161011033344', '20161011033351', '20161011033358', '20161011033419', '20161011033543', '20161011033609', '20161011033627', '20161011033727', '20161011033738', '20161011033812', '20161011033819', '20161011182519', '20161011182528', '20161011201221', '20161011203310', '20161011203321', '20161011203336', '20161011204136', '20161011204149', '20161011204200', '20161011204241', '20161011204317', '20161011205508', '20161011205516', '20161011210742', '20161011210825', '20161011211010', '20161011211341', '20161011211647', '20161011211712', '20161011211751', '20161011211800', '20161011211808', '20161011213719', '20161011213805', '20161011213818', '20161011221025', '20161011221031', '20161011221037', '20161011221045', '20161011221048', '20161011221242', '20161011221257', '20161011221719', '20161011221727', '20161011222932', '20161011222942', '20161011225944', '20161012011115', '20161012011134', '20161012150305', '20161012152035', '20161012152144', '20161012152415', '20161012152558', '20161012153203', '20161012153207', '20161012153432', '20161012153440', '20161015160533', '20161016051617', '20161016051624', '20161016051627', '20161016051639', '20161016051644', '20161016051703', '20161016153911', '20161016154045', '20161016154100', '20161016154115', '20161016154148', '20161016154152', '20161016154324', '20161016154409', '20161016154645', '20161016154848', '20161016155220', '20161016155227', '20161016155424', '20161016155556', '20161016155615', '20161016160107', '20161016160329', '20161016161017', '20161016161018', '20161016161054', '20161016161110', '20161018045142', '20161022214340', '20161026145721', '20161026145734', '20161026145742', '20161026145748', '20161026145802', '20161026145805', '20161026145909', '20161026145927', '20161026145937', '20161026150000', '20161026150020', '20161026150039', '20161026150122', '20161026150129', '20161026150143', '20161026150205', '20161026150245', '20161031142258', '20161102163653', '20161102163707', '20161110044441', '20161110044452', '20161110044659', '20161110044756', '20161110213925', '20161110214849', '20161110220927', '20161110223243', '20161110223405', '20161110223434', '20161111052532', '20161111053045', '20161111223232', '20161111224950', '20161112002617', '20161112014213', '20161112030119', '20161112030120', '20161112030130', '20161112030728', '20161112030756', '20161112030806', '20161112030818', '20161112031128', '20161112031619', '20161112031737', '20161112032226', '20161112032241']

# SANDEEP DATA
original_imei = '354124071495873'

train_files = ['20161004063335', '20161004063345', '20161004063354', '20161004063405', '20161004063428',
               '20161004063545', '20161004064325', '20161004064408', '20161004151433', '20161004151509',
               '20161004165750', '20161004202206', '20161004202222', '20161004210556', '20161004212314',
               '20161004212349', '20161004212435', '20161004212456', '20161004212551', '20161004213020',
               '20161004220452', '20161004220553', '20161004223621', '20161004223852', '20161004235222',
               '20161004235241', '20161004235303', '20161005003740', '20161005003747', '20161005003802',
               '20161005003833', '20161005010544', '20161005011829', '20161005022853', '20161005022922',
               '20161005034309', '20161005034426', '20161005132941', '20161005133105', '20161005133645',
               '20161005133658', '20161005134117', '20161005151348', '20161005151403', '20161005151505',
               '20161005151634', '20161005151911', '20161005154412', '20161005154425', '20161005184437',
               '20161005191404', '20161005191857', '20161005191921', '20161005202914', '20161005202927',
               '20161005203102', '20161005203123', '20161005203241', '20161005203520', '20161005203546',
               '20161005203632', '20161005210652', '20161005211658', '20161005211722', '20161005231040',
               '20161006025454', '20161006025533', '20161006025559', '20161006034833', '20161006041719',
               '20161006042211', '20161006042235', '20161006042300', '20161006042418', '20161006042536',
               '20161006043353', '20161006082832', '20161006082926', '20161006083202', '20161006083246',
               '20161006083252', '20161006083304', '20161006083746', '20161006083823', '20161006083832',
               '20161006083845', '20161006162435', '20161006165131', '20161006165213', '20161006165301',
               '20161006165338', '20161006205129', '20161006223828', '20161006223839', '20161007010658',
               '20161007010856', '20161007010904', '20161007010938', '20161007083626', '20161008163253',
               '20161008163306', '20161008163803', '20161008163855', '20161010163725', '20161010163736',
               '20161010163841', '20161010163913', '20161026031714', '20161026031743', '20161026145636',
               '20161031165604', '20161031165630', '20161031165644', '20161031165727', '20161031165729',
               '20161031170015', '20161031170039', '20161031171940', '20161031171941', '20161031172450',
               '20161031191642', '20161031191658', '20161031191709', '20161031192058', '20161031192136',
               '20161110042809', '20161110043023', '20161110043057', '20161110043318', '20161110043350',
               '20161110052404', '20161110062705', '20161110062751', '20161110062948', '20161110065006',
               '20161110070558', '20161110071001', '20161110071021', '20161110071043', '20161110071121',
               '20161110072400', '20161110073008', '20161110080826', '20161110081237', '20161110083332',
               '20161110083738', '20161110090340', '20161110091734', '20161110091754', '20161110091802',
               '20161110093733', '20161110093809', '20161110115157', '20161110120156', '20161110120213',
               '20161110120343', '20161110120354', '20161110120410', '20161110120424', '20161110120501',
               '20161110120613', '20161110120634', '20161110120652', '20161110120705', '20161110120710',
               '20161110120825', '20161110120924', '20161110121417', '20161110121537', '20161110122022',
               '20161110122031', '20161110122039', '20161110122047', '20161110122056', '20161110122119',
               '20161110152121', '20161110152628', '20161110152644', '20161110153137', '20161110153629',
               '20161110154129', '20161110154142', '20161110154638', '20161110155129', '20161110155628',
               '20161110160120', '20161110160139', '20161110160640', '20161110161138', '20161110161627',
               '20161110162622', '20161110162640', '20161110163628', '20161110164620', '20161110170002',
               '20161110170215', '20161110170305', '20161110170358', '20161110170417', '20161110170532',
               '20161110170609', '20161110170727', '20161110170759', '20161110170848', '20161110170913',
               '20161110171030', '20161110202217', '20161111073609', '20161111163741', '20161115134619',
               '20161115134621', '20161115134632', '20161115134902', '20161115141035', '20161115142017',
               '20161115142038', '20161115142230', '20161115142250', '20161115142346', '20161115143211',
               '20161115143251', '20161115143423', '20161115143430', '20161115143622']

test_files = ['20161004202206', '20161004202222', '20161004210556', '20161004212314', '20161004212349',
              '20161004212435', '20161004212456', '20161004212551', '20161004213020', '20161004220452',
              '20161004220553', '20161004223621', '20161004223852', '20161004235222', '20161004235241',
              '20161004235303', '20161005003740', '20161005003747', '20161005003802', '20161005003833',
              '20161005010544', '20161005011829', '20161005022853', '20161005022922', '20161005034309',
              '20161005034426', '20161005132941', '20161005133105', '20161005133645', '20161005133658',
              '20161005134117', '20161005151348', '20161005151403', '20161005151505', '20161005151634',
              '20161005151911', '20161005154412', '20161005154425', '20161005184437', '20161005191404',
              '20161005191857', '20161005191921', '20161005202914', '20161005202927', '20161005203102',
              '20161005203123', '20161005203241', '20161005203520', '20161005203546', '20161005203632',
              '20161005210652', '20161005211658', '20161005211722', '20161005231040', '20161006025454',
              '20161006025533', '20161006025559', '20161006034833', '20161006041719', '20161006042211',
              '20161006042235', '20161006042300', '20161006042418', '20161006042536', '20161006043353',
              '20161006082832', '20161006082926', '20161006083202', '20161006083246', '20161006083252',
              '20161006083304', '20161006083746', '20161006083823', '20161006083832', '20161006083845',
              '20161006162435', '20161006165131', '20161006165213', '20161006165301', '20161006165338',
              '20161006205129', '20161006223828', '20161006223839', '20161007010658', '20161007010856',
              '20161007010904', '20161007010938', '20161007083626', '20161008163253', '20161008163306',
              '20161008163803', '20161008163855', '20161010163725', '20161010163736', '20161010163841',
              '20161010163913', '20161026031714', '20161026031743', '20161026145636', '20161031165604',
              '20161031165630', '20161031165644', '20161031165727', '20161031165729', '20161031170015',
              '20161031170039', '20161031171940', '20161031171941', '20161031172450', '20161031185746',
              '20161031191642', '20161031191658', '20161031191709', '20161031192058', '20161031192136',
              '20161110042809', '20161110043023', '20161110043057', '20161110043318', '20161110043350',
              '20161110052404', '20161110062705', '20161110062751', '20161110062948', '20161110065006',
              '20161110070558', '20161110071001', '20161110071021', '20161110071043', '20161110071121',
              '20161110072400', '20161110073008', '20161110080826', '20161110081237', '20161110083332',
              '20161110083738', '20161110090340', '20161110091734', '20161110091754', '20161110091802',
              '20161110093733', '20161110093809', '20161110115157', '20161110120156', '20161110120213',
              '20161110120343', '20161110120354', '20161110120410', '20161110120424', '20161110120501',
              '20161110120613', '20161110120634', '20161110120652', '20161110120705', '20161110120710',
              '20161110120825', '20161110120924', '20161110121417', '20161110121537', '20161110122022',
              '20161110122031', '20161110122039', '20161110122047', '20161110122056', '20161110122119',
              '20161110152121', '20161110152628', '20161110152644', '20161110153137', '20161110153629',
              '20161110154129', '20161110154142', '20161110154638', '20161110155129', '20161110155628',
              '20161110160120', '20161110160139', '20161110160640', '20161110161138', '20161110161627',
              '20161110162622', '20161110162640', '20161110163628', '20161110164620', '20161110170002',
              '20161110170215', '20161110170305', '20161110170358', '20161110170417', '20161110170532',
              '20161110170609', '20161110170727', '20161110170759', '20161110170848', '20161110170913',
              '20161110171030', '20161110202217', '20161111073609', '20161111163741']

# sort based on earliest time
train_files.sort(key=lambda x: int(x))
test_files.sort(key=lambda x: int(x))


def sandeep():
    print requests.get('http://localhost:8000/sandeep/').text


def train(imei, file_path):  # returns imei, result code, numfiles
    files = {'path': open(file_path, 'rb')}
    data = {'imei': imei}
    r = requests.post('http://localhost:8000/train/', files=files, data=data)
    print r.text


def test(imei, file_path):  # returns max version which can be passed to query
    files = {'path': open(file_path, 'rb')}
    data = {'imei': imei}
    r = requests.post('http://localhost:8000/test/', files=files, data=data)
    print r.text
    return json.loads(r.text)['max_version']


def ask_trained(imei, version):  # returns 'trained' or not
    data = {'imei': imei, 'version': version}
    r = requests.post('http://localhost:8000/ask_trained/', data=data)
    print r.text


def query(imei, version):  # used to get the summary ('result', 'version')
    data = {'imei': imei, 'version': version}
    r = requests.post('http://localhost:8000/query/', data=data)
    print r.text


def manual_fix(imei, version, signal):  # fixes a version. signal is either 0 or 1
    data = {'imei': imei, 'version': version, 'signal': signal}
    r = requests.post('http://localhost:8000/manual_fix/', data=data)
    print r.text
    # returns 'imei' and 'received_signal'


# MAIN PROCESSNG LOOP

# testing server
sandeep()

datapoints = train_files[:10] + test_files

i = 0
latest_version = 0
while True:
    print 'loading data point number: {}'.format(i)
    print 'working on imei: {}'.format(imei)
    print 'pick your choice:'
    print '* train'
    print '* test'
    print '* ask'
    print '* query'
    print '* manual'
    print '* exit'

    choice = raw_input("choice >>").strip()
    if choice == 'train':
        # train code here
        try:
            file_path = base_path + 'train/' + original_imei + '/' + str(datapoints[i])
            train(imei, file_path)
            ask_trained(imei, latest_version)
        except Exception as e:
            print e
        i += 1
    elif choice == 'test':
        # test code here
        try:
            file_path = base_path + 'train/' + original_imei + '/' + str(datapoints[i])
            latest_version = test(imei, file_path)
            print 'latest_version', latest_version
            time.sleep(3)
            query(imei, latest_version)
        except Exception as e:
            print e
        i += 1
    elif choice == 'ask':
        # ask trained code here
        ask_trained(imei, latest_version)
    elif choice == 'query':
        # query code here
        query(imei, latest_version)
        pass
    elif choice == 'manual':
        # manual code here
        signal = raw_input("signal >>").strip()
        manual_fix(imei, latest_version, signal)
    elif choice == 'exit':
        break
    else:
        print 'oops, typo?'
